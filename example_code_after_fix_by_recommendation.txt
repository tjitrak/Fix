// The content of this file was generated by IBM Cloud
// Do not modify it as it might get overridden
const bodyParser = require('body-parser');
const cors = require('cors');
const path = require('path');
const multer = require('multer');
var express = require('express');
var router = express.Router();
const core = require('../core/core');
// security
const helmet = require('helmet');
// Sets "Strict-Transport-Security: max-age=31536000; includeSubDomains".
const hsts_maxage = 31536000

const {
    expressWarped,
    expressErrorWarped,
    LogSingleton,
    ACTION_TYPE
} = require("loglib-nodejs");
const httpContext = require('express-http-context');
const requestInfo = require('./request-info');

LogSingleton.setup(global.gConfig);
LogSingleton.setLogLevel(LogSingleton.LogLevel[global.gConfig.log_level.toUpperCase()]);

module.exports = function (app, server) {
    // app.use(helmet.hsts({
    //     maxAge: hsts_maxage
    // }));
    app.use(helmet());
    app.use(cors());
    app.use(bodyParser.urlencoded({
        extended: false
    }));
    app.use(bodyParser.json());

    app.use(multer({
        dest: path.normalize(`${__dirname}/../data/uploads`),
        rename: function (fieldname, filename) {
            return Date.now();
        }
    }).any());

    app.use(httpContext.middleware);
    app.use(requestInfo());
   

    /* GET App-HealthCheck. */
    router.get('/App-HealthCheck', function (req, res, next) {
        if ('undefined' == typeof logger) {
            logger = LogSingleton.getLog();
        }
        // logger.info('App-HealthCheck is checked')
        res.send('OK');
    });

    /* GET Varsion. */
    router.get('/version', function (req, res, next) {
        if ('undefined' == typeof logger) {
            logger = LogSingleton.getLog();
        }
        logger.info('version', global.gConfig.tag_version);
        return res.status(200).json({
            tag_version: global.gConfig.tag_version
        });
    });

    /* GET home page. */
    router.get('/', function (req, res, next) {
        if ('undefined' == typeof logger) {
            logger = LogSingleton.getLog();
        }
        logger.info('bs-external is working')
        return res.status(200).json({
            msg: 'bs-external is working'
        });
    });

    // add routes from provider

    const example = require('../services/example');
    const createExternalLead = require('../services/createExternalLead')
    const updateTrackingStatus = require('../services/updateTrackingStatus');
    const sendTrackingStatus = require('../services/sendTrackingStatus');
    const testNoti = require('../services/testNoti')


    router.post('/sendTrackingStatus', expressWarped((req, res, next) => {
        logger = LogSingleton.getLog(res, core.getRequestInfo());
        return sendTrackingStatus.exec(req, res, next, logger)
            .then(function (data) {
                logger.debug([data]);
                res.setHeader("Strict-Transport-Security", "max-age=31536000");
                res.status(200).json(data);
                return data;
            })
            .catch(function (err) {
                logger.exception('err', err);
                res.setHeader("Strict-Transport-Security", "max-age=31536000");
                res.status(400).json(err);
                return err;
            });
    }));

    router.post('/updateTrackingStatus', expressWarped((req, res, next) => {
        logger = LogSingleton.getLog(res, core.getRequestInfo());
        return updateTrackingStatus.exec(req, res, next, logger)
            .then(function (data) {
                logger.debug([data]);
                res.setHeader("Strict-Transport-Security", "max-age=31536000");
                res.status(200).json(data);
                return data;
            })
            .catch(function (err) {
                logger.exception('err', err);
                res.setHeader("Strict-Transport-Security", "max-age=31536000");
                res.status(400).json(err);
                return err;
            });
    }));

    router.post('/createExternalLead', expressWarped((req, res, next) => {
        logger = LogSingleton.getLog(res, core.getRequestInfo());
        return createExternalLead.exec(req, res, next, logger)
            .then(function (data) {
                logger.debug([data]);
                res.setHeader("Strict-Transport-Security", "max-age=31536000");
                res.status(200).json(data);
                return data;
            })
            .catch(function (err) {
                logger.exception('err', err);
                res.setHeader("Strict-Transport-Security", "max-age=31536000");
                res.status(400).json(err);
                return err;
            });
    }));

    router.post('/testNoti', expressWarped((req, res, next) => {
        logger = LogSingleton.getLog(res, core.getRequestInfo());
        return testNoti.exec(req, res, next, logger)
            .then(function (data) {
                logger.debug([data]);
                res.status(200).json(data);
                return data;
            })
            .catch(function (err) {
                logger.exception('err', err);
                res.status(400).json(err);
                return err;
            });
    }));

    router.post('/example', expressWarped((req, res, next) => {
        logger = LogSingleton.getLog(res, core.getRequestInfo());
        return example.exec(req, res, next, logger)
            .then(function (data) {
                logger.debug([data]);
                res.status(200).json(data);
                return data;
            })
            .catch(function (err) {
                logger.exception('err', err);
                res.status(400).json(err);
                return err;
            });
    }));

    app.use('/', router);
};